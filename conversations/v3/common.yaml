openapi: '3.0.0'
info:
  title: Common operations
  description: |
    In this section, you find an overview of operations common to all Conversations [channels](#channels).

    The Conversations API works as a wrapper for messaging on varied channels and aims to provide a common data model
    unified to the greatest possible extent.

    Here are some guidelines on the general usage.
    For details about interaction on a particular channel, please refer to the channel specific section.

    ### Sending messages

    All channels use the same endpoint and generic data model for requests to send messages. However, the components
    of messages beyond plain text are channel specific. Some channels enforce special policies and restrictions,
    for example the WhatsApp channel, and you need to watch that you comply with them in the context of your use case.

    <!-- NOTE Channels are expected to be used separately, not in cascades anymore (discontinued in the next version) -->

    For details on the channels, please refer to the channel specific section.

    **Media and other non-text content**

    Some channels allow you to attach images, video, audio, stickers, buttons or URLs.
    These kinds of content are channel specific.

    **Bulk messaging**

    All channels provide the functionality of sending bulks of messages. A bulk of messages is always sent via one
    channel to a single recipient.

    Our system guarantees that the messages are sent to the recipient in the requested order.

    ### Receiving status updates

    The API allows you to automatically receive delivery notifications and status updates about messages that you
    sent to your channels.

    For this service, you will need to provide a URL (`messageStatusUrl`) at your webserver,
    e.g. `https://rest.customer.com/messagestatus/`. This URL must serve a webhook able to process POST HTTP requests,
    which the tyntec system will fire upon events in the system, in this case upon message status updates.

    You may also configure an opt-in filter on one or more `MessageStatus::*` event types in the tyntec
    application, see [Webhook Configuration](#configurations) and [Webhook Events](#webhook-events).
    The set of available event types slightly varies on each channel:

    | Channel | Accepted | Dispatched | Delivered | Seen | Channel failed | Deleted |
    | ---: | :---: | :---: | :---: | :---: | :---: | :---: |
    | WhatsApp | ✔ | ✔ | ✔ | ✔ | ✔ | ✔ |
    | Viber | ✔ | ✔ | ✔ | ✔ | ✔ | ❌ |
    | Telegram | ✔ | ✔ | ❌ | ❌ | ✔ | ✔ |
    | WeChat | ✔ | ✔ | ❌ | ❌ | ✔ | ❌ |
    | SMS | ✔ | ✔ | ✔ | ❌ | ✔ | ❌ |


    **Retries**

    The tyntec application will retry to post the request 2 more times in the case your
    webhook does not accept the request (final response codes other than 2xx).

    ### Receiving inbound messages

    The API allows you to automatically receive inbound messages sent to your channels by your customers.

    **Note:** For the SMS channel, you need to ask us to enable 2-way interaction,
    see [Channel specific prerequisites](#channels).

    For this service, you will need to provide a URL (`inboundMessageUrl`) at your webserver,
    e.g. `https://rest.customer.com/inboundmessages/`. This URL must serve a webhook able to process POST HTTP requests,
    which the tyntec [application](current.html#configurations) will fire upon the events of inbound messages.

    The events fired upon are of type `MoMessage`.

    **Retries**

    The tyntec application will retry to post the request in the case your webhook does not accept the request
    (final response codes other than 2xx), depending on the channel as follows:

    - *WhatsApp:* retries via the WhatsApp mechanism with exponential decrease in frequency of attempts that continues
      up to 14 days (attempts repeat less and less often)
    - *Viber:* TODO
    - *WeChat:* TODO
    - *Telegram:* TODO
    - *SMS:* retries every 10 seconds. Retries are paused for 10 minutes after every 100 consecutive unsuccessful
      delivery attempts. tyntec's application will keep trying for a maximum of 48 hours.

  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '3.0'
  x-repository: https://github.com/tyntec/api-collection/blob/master/conversations
  x-specification-file: common.yaml
  x-major-version: v3
servers:
  - url: https://api.tyntec.com/conversations/v3
security:
  - ApiKeyAuth: []
tags:
  - name: "Message details"
    description: |
      Operations on single sent messages common to all channels. They provide detailed information about sent messages.
  - name: "Inbound media"
    description: |
      After receiving an inbound message (_MoMessage_ event) with a media ID, this endpoint can be used to download
      the media file.
  - name: "Outbound media (Beta)"
    description: |
      As an alternative to the download of outbound media on message requests, we enable you to upload a media file
      and use it later when sending messages.

      After a successful upload, we generate an ID that is used as an alternative to the media URL.

      The uploaded media can be stored

      - as a static asset
      - only for a certain period
      - for one-time usage

      As this is in beta, we grant access to it only via an approved access request.
paths:
  /messages/{messageId}/status:
    parameters:
      - $ref: '#/components/parameters/MessageId'
    get:
      operationId: getMessageStatus
      summary: Check message status
      tags:
        - "Message details"
      description: Check the status of a message
      responses:
        200:
          $ref: '#/components/responses/MessageStatus'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
  /messages/{messageId}/events:
    parameters:
      - $ref: '#/components/parameters/MessageId'
    get:
      operationId: getMessageEvents
      summary: List delivery events
      tags:
        - "Message details"
      description: List the delivery events of a message
      responses:
        200:
          description: The list of delivery events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDeliveryEvents'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
  /media:
    get:
      operationId: listUploadedMedia
      summary: List uploaded media files
      description: Lists all uploaded media files
      tags:
        - "Outbound media (Beta)"
      responses:
        200:
          $ref: '#/components/responses/ListMediaResponse'
        default:
          $ref: '#/components/responses/Default'
    post:
      parameters:
        - name: validity
          description: How long is the media stored in minutes.
          required: false
          in: query
          schema:
            type: integer
            default: 1440
        - name: filename
          description: the name of the file
          required: false
          in: query
          schema:
            type: string

      operationId: uploadMedia
      summary: Upload a media file
      description: Uploads a media file for message sending
      tags:
        - "Outbound media (Beta)"
      requestBody:
        description: the media to be uploaded
        required: true
        content:
            '*/*':
              schema:
                type: string
                format: binary
      responses:
        200:
          description: The media was successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaUploadResponse'
        default:
          $ref: '#/components/responses/Default'
  /media/{mediaId}:
    parameters:
      - $ref: '#/components/parameters/MediaId'
    delete:
      operationId: deleteUploadedMedia
      summary: Delete a media file
      description: Deletes a prior uploaded media.
      tags:
        - "Outbound media (Beta)"
      responses:
        204:
          description: The associated media was successfully deleted
        default:
          $ref: '#/components/responses/Default'
    get:
      operationId: downloadMedia
      summary: Download media file
      tags:
        - "Inbound media"
        - "Outbound media (Beta)"
      description: Retrieve the media associated with the id
      responses:
        200:
          description: The media associated with the id requested exists.
          content:
            'audio/*':
              schema:
                type: string
                format: binary
            'application/*':
              schema:
                type: string
                format: binary
            'text/*':
              schema:
                type: string
                format: binary
            'video/*':
              schema:
                type: string
                format: binary
        404:
          description: The media associated with the id does not exist in our system
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              example:
                status: 404
        default:
          $ref: '#/components/responses/Default'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
  parameters:
    MessageId:
      required: true
      description: Message id provided by tyntec
      name: messageId
      in: path
      schema:
        type: string
        format: uuid
    MediaId:
      required: true
      description: Media provided by tyntec
      name: mediaId
      in: path
      schema:
        type: string
        format: uuid
  responses:
    MessageResponse:
      description: The response after the server has accepted the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    BulkMessageResponse:
      description: The response after the server has accepted the bulk request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BulkMessageResponse'
    MessageStatus:
      description: The response after the server has accepted the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageStatus'
    ListMediaResponse:
      description: list of stored media files
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MediaResponse'
            minItems: 0
    Default:
      description: The default response in case of any other error. Please check the error object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: The request does not match our expectations. Please check the Problems object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            status: 400
            violations: [
              {
                field: validate.request.whatsapp.contentType,
                message: must not be empty
              }
            ]
            title: Constraint Violation
    Forbidden:
      description: You attempting to use a number that is not assigned to your account
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://httpstatuses.com/403
            title: Forbidden
            status: 403
    NotFound:
      description: The requested element was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
  schemas:
    MessageRequest:
      type: object
      description: The message you would like to send
      required:
        - to
        - channel
        - from
      properties:
        to:
          type: string
          description: |
            The message's recipient
            The format depends on the specific channel
          example: "+1233423454"
        from:
          type: string
          description: |
            The sender of the messages. The format depends on the specific channel.
          example: "+1233423454"
        channel:
          type: string
          description: The channel selected for delivery.
          example: sms
          items:
            type: string
            enum:
              - sms
              - whatsapp
              - wechat
              - viber
        overrides:
          $ref: '#/components/schemas/MessageRequestOverrides'
        context:
          type: string
          description: The context for this particular message
          maxLength: 125
        content:
          type: object
          description: The message's content. Refer to the channel specifics
      example:
        to: "+123234234"
        from: "545345345"
        channel: "whatsapp"
        whatsapp:
          contentType: text
          text: A simple text message
    MessageRequestOverrides:
      type: object
      description: Overrides of defaults for this message
      properties:
        notificationCallbackUrl:
          type: string
          pattern: ^https:\/\/?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$
          description: |
            When present this url is used for sending the delivery notifications to your webhook.
            Can be used for debugging use cases or individual routings.
          example:
            https://en4u5fpprib5i.x.pipedream.net
    MessageResponse:
      type: object
      required:
        - messageId
        - acceptedAt
      properties:
        messageId:
          type: string
          format: uuid
          description: A global unique Message Id reference
          example: 77185196-664a-43ec-b14a-fe97036c697f
        acceptedAt:
          type: string
          format: date-time
          description: A point in time when the API confirms that the message request was accepted
    MessageStatus:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          description: Global unique Message Id reference
        status:
          type: string
          description: Current status of the message
        timestamp:
          type: string
          format: date-time
          description: Point in time when status has been entered
    MessageDeliveryEvents:
      type: object
    BulkMessageRequest:
      type: object
    BulkMessageResponse:
      type: object
      properties:
        bulkId:
          type: string
        messageIds:
          type: array
          items:
            type: string
    MediaUploadResponse:
      type: object
      required:
        - mediaId
        - url
        - quota
        - usage
      properties:
        mediaId:
          type: string
          format: uuid
        url:
          type: string
        quota:
          type: integer
        usage:
          type: integer
    MediaResponse:
      type: object
      properties:
        mediaId:
          type: string
          format: uuid
        contentType:
          type: string
        validity:
          type: string
          format: date-time
        fileName:
          type: string
        fileSize:
          type: integer
    Problem:
      type: object
      additionalProperties: true
      description: The problem object follows the RFC-7807 (https://tools.ietf.org/html/rfc7807)
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          description: A URI reference [RFC3986] that identifies the problem type
          example: https://docs.tyntec.com/problems/DataNotParseable
          type: string
        title:
          type: string
          example: Data given was not parseable
          description: A short, human-readable summary of the problem type.
        status:
          description: The HTTP status code (RFC7231, Section 6) generated by the origin server for this occurrence of the problem.
          type: string
          example: 400
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: |
            Unexpected end-of-input: expected close marker for Object (start marker at [Source: UNKNOWN; line: -1, column: -1) at [Source: UNKNOWN; line: 1, column: 97]
