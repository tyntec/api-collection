openapi: '3.0.0'
info:
  title: RCS
  description: |
    The Conversations API allows you to easily reach out and communicate with your clients via RCS.

  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '3.24'
  x-repository: https://github.com/tyntec/api-collection/blob/master/conversations
  x-specification-file: rcs.yaml
  x-major-version: v3
servers:
  - url: https://api.tyntec.com/conversations/v3
security:
  - ApiKeyAuth: [ ]
tags:
  - name: "Messaging"
    description: |
      In this section we guide you on how to send messages, get information about the status and the events happening during the delivery.
  - name: "RCS Phone Numbers"
    description: |
      List all RCS Phone Numbers configured for your API account.
  - name: "Callback configuration"
    description: |
      In this section, we guide you on how to configure the callbacks on a per-channel basis.
paths:
  /messages:
    post:
      operationId: sendMessage
      summary: Send a message
      tags:
        - "Messaging"
      description: Send messages via this path.
      requestBody:
        description: The message you would like to send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        202:
          $ref: '#/components/responses/MessageResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'
  /configurations/channels/rcs:
    get:
      tags:
        - "RCS Agents"
      summary: List RCS Agents
      operationId: listAllRcsChannels
      description: List all RCS Agent configurations available to your API account
      responses:
        200:
          $ref: '#/components/responses/ListAllRcsChannelsResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'
  /configurations/channels/rcs/agents/{rcs-agent-id}:
    parameters:
      - $ref: '#/components/parameters/RcsAgentId'
    get:
      tags:
        - "RCS Agent Id"
      summary: Read a configuration
      operationId: getRcsChannelConfig
      description: Returns the specific channel configuration
      responses:
        200:
          $ref: '#/components/responses/RcsChannelResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'
  /configurations/channels/rcs/agents/{rcs-agent-id}/callbacks:
    parameters:
      - $ref: '#/components/parameters/RcsAgentId'
    put:
      tags:
        - "Callback configuration"
      summary: Update the callback
      operationId: updateRcsChannelCallback
      description: Update the callback settings of a specific Rcs Agent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelCallback'
      responses:
        200:
          $ref: '#/components/responses/RcsChannelResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Default'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
  parameters:
    RcsAgentId:
      name: rcs-agent-id
      in: path
      required: true
      description: RCS agent id
      schema:
        type: string
        minLength: 1
      example: foobar_agent
  responses:
    MessageResponse:
      description: The response after the server has accepted the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    Default:
      description: The default response in case of any other error. Please check the error object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: The request does not match our expectations. Please check the Problems object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            status: 400
            violations: [
              {
                field: validate.request.content.contentType,
                message: must not be empty
              }
            ]
            title: Constraint Violation
    Forbidden:
      description: You attempting to use a number that is not assigned to your account
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://httpstatuses.com/403
            title: Forbidden
            status: 403
    ListAllRcsChannelsResponse:
      description: A list of RCS channel configurations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RcsChannelResponses'
    RcsChannelResponse:
      description: A RCS agent configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RcsChannelResponse'
  schemas:
    Problem:
      $ref: './common.yaml#/components/schemas/Problem'
    MessageResponse:
      $ref: './common.yaml#/components/schemas/MessageResponse'
    MessageRequest:
      type: object
      description: The message you would like to send
      required:
        - to
        - channel
        - from
      properties:
        to:
          type: string
          description: |
            The message's recipient phone number
          example: "+49231987654"
        from:
          type: string
          description: |
            The agent id the message should be sent from.
          example: "agent_id_1"
        channel:
          type: string
          description: The channel selected for delivery.
          example: rcs
          enum:
            - rcs
        overrides:
          $ref: 'common.yaml#/components/schemas/MessageRequestOverrides'
        context:
          type: string
          description: The context for this particular message
          maxLength: 125
        content:
          oneOf:
            - $ref: '#/components/schemas/RcsTextContent'
            - $ref: '#/components/schemas/RcsMediaContent'
            - $ref: "#/components/schemas/RcsRichCardContent"
      example:
        to: "+49231987654"
        from: "agent_id_1"
        channel:  "rcs"
        content:
          contentType: media
          media:
            url: https://test.com/image.jpg
    RcsTextContent:
      type: object
      description: A plain text message
      required:
        - contentType
        - text
      properties:
        contentType:
          type: string
          description: Determines the type of the message. Always _text_.
          enum:
            - text
        text:
          type: string
          description: Text to be sent
          maxLength: 3072
    RcsMediaContent:
      type: object
      properties:
        contentType:
          type: string
          enum:
            - media
        media:
          $ref: '#/components/schemas/RcsMedia'
    #
    # Media
    #
    RcsMedia:
      type: object
      description: One of both properties _url_ or _id_ **must** be set
      properties:
        id:
          type: string
          description: The media id of previously uploaded media
          format: uuid
        url:
          type: string
          description: the url of the location where the media is stored
    #
    # Rich card
    #
    RcsRichCardContent:
      type: object
      description: Exactly one of _carouselCard_ or _standaloneCard_ *must* be set
      properties:
        carouselCard:
          $ref: "#/components/schemas/RcsCarouselCard"
        standaloneCard:
          $ref: "#/components/schemas/RcsStandaloneCard"
    #
    # Carousel card
    #
    RcsCarouselCard:
      type: object
      description: A carousel of cards to showcase multiple items
      required:
        - cardContents
      properties:
        cardWidth:
          $ref: "#/components/schemas/RcsCardWidth"
        cardContents:
          type: array
          description: The list of contents for each card in the carousel. A carousel can have a minimum of 2 cards and a maximum 10 cards.
          items:
            $ref: "#/components/schemas/RcsCardContent"
    RcsCardWidth:
      type: string
      description: The width of the rich card
      enum:
        - SMALL
        - MEDIUM
    RcsCardContent:
      type: object
      description: The contents inside a rich card
      required:
        - media
      properties:
        title:
          type: string
          description: The title of the card
          example: Card no1
        description:
          type: string
          description: The description of the card
          example: This is the description for Card no1
        media:
          $ref: "#/components/schemas/RcsCardMedia"
        suggestions:
          type: array
          description: A list of suggestions
          items:
            $ref: "#/components/schemas/RcsSuggestion"
    RcsCardMedia:
      type: object
      description: A media file within a rich card.
      required:
        - media
      properties:
        height:
          type: string
          description: The height of the media within a rich card with a vertical layout.
          enum:
            - SHORT
            - MEDIUM
            - TALL
        media:
          $ref: "#/components/schemas/RcsMedia"
    #
    # Standalone card
    #
    RcsStandaloneCard:
      type: object
      description: A standalone card
      required:
        - cardContent
      properties:
        cardOrientation:
          type: string
          description: Orientation of the card.
          enum:
            - HORIZONTAL
            - VERTICAL
        thumbnailImageAlignment:
          type: string
          description: Image preview alignment for standalone cards with horizontal layout.
          enum:
            - LEFT
            - RIGHT
        cardContent:
          $ref: "#/components/schemas/RcsCardContent"
    #
    # Suggestion
    #
    RcsSuggestion:
      type: object
      description: A suggested reply or a suggested action. Exactly one of _reply_ or _action_ *must* be set
      properties:
        reply:
          $ref: "#/components/schemas/RcsReply"
        action:
          $ref: "#/components/schemas/RcsAction"
    RcsReply:
      type: object
      description: Sends back a text reply.
      required:
        - text
        - postbackData
      properties:
        text:
          type: string
          description: Text that is shown in the suggested reply and sent back to the agent when the user taps it
          example: This is an auto reply
        postbackData:
          type: string
          description: A base64-encoded payload received when the user taps the suggested reply
    RcsAction:
      type: object
      description: Initiates a native action on the device. Exactly one of _dialAction_, _viewLocationAction_, _createCalendarEventAction_, _openUrlAction_, _shareLocationAction_, _composeAction_ *must* be set
      required:
        - text
        - postbackData
      properties:
        text:
          type: string
          description: Text that is shown in the suggested action
          example: Click here
        postbackData:
          type: string
          description: A base64-encoded payload received when the user taps the suggested action
        fallbackUrl:
          type: string
          description: Fallback URL to use if a client doesn't support a suggested action
        dialAction:
          $ref: "#/components/schemas/RcsDialAction"
        viewLocationAction:
          $ref: "#/components/schemas/RcsViewLocationAction"
        createCalendarEventAction:
          $ref: "#/components/schemas/RcsCreateCalendarEventAction"
        openUrlAction:
          $ref: "#/components/schemas/RcsOpenUrlAction"
        shareLocationAction:
          $ref: "#/components/schemas/RcsShareLocationAction"
    RcsDialAction:
      type: object
      description: Opens the user's default dialer app with the agent-specified phone number filled in
      required:
        - phoneNumber
      properties:
        phoneNumber:
          type: string
          description: The phone number in _+12223334444_ format
          example: "+12223334444"
    RcsViewLocationAction:
      type: object
      description: Opens the user's default map app and selects the agent-specified location or searches around the user's location given an agent-specified query.
      properties:
        latLong:
          $ref: "#/components/schemas/RcsLatLong"
        label:
          type: string
          description: The label of the pin dropped at latLong
        query:
          type: string
          description: Only supported on Android Messages clients. Specify a query string to do a location search centered around the user's current location
          example: Growing Tree Bank
    RcsLatLong:
      type: object
      description: The latitude and longitude of a specified location
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          description: The latitude in degrees. It must be in the range [-90.0, +90.0]
          minimum: -90.0
          maximum: 90.0
        longitude:
          type: number
          description: The longitude in degrees. It must be in the range [-180.0, +180.0]
          minimum: -180.0
          maximum: 180.0
    RcsCreateCalendarEventAction:
      type: object
      description: Opens the user's default calendar app and starts a new calendar event flow with the agent-specified event data pre-filled
      required:
        - startTime
        - endTime
        - title
        - description
      properties:
        startTime:
          type: string
          description: Event start time in timestamp format (RFC 3339)
          example: 2014-10-02T15:01:23Z
        endTime:
          type: string
          description: Event end time in timestamp format (RFC 3339)
          example: 2015-12-01T18:23:43Z
        title:
          type: string
          description: The title of the event
          example: Important event
        description:
          type: string
          description: The description of the event
    RcsOpenUrlAction:
      type: object
      description: Opens the user's default web browser app to the specified URL
      required:
        - url
      properties:
        url:
          type: string
          description: The url to be opened
        application:
          type: string
          description: Type of the URL open application
          enum:
            - BROWSER
            - WEBVIEW
        webviewViewMode:
          type: string
          description: Type of the webview's view mode
          enum:
            - FULL
            - HALF
            - TALL
        description:
          type: string
          description: Accessibility description for webview.
    RcsShareLocationAction:
      type: object
      description: Opens the RCS app's location chooser so the user can pick a location to send back to the agent
    RcsChannelResponse:
      $ref: './configurations.yaml#/components/schemas/RcsChannelResponse'
    RcsChannelResponses:
      $ref: './configurations.yaml#/components/schemas/RcsChannelResponses'
    ChannelCallback:
      $ref: './configurations.yaml#/components/schemas/ChannelCallback'